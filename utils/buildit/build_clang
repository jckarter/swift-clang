#!/bin/sh
# LLVM LOCAL file B&I

set -x

# Build LLVM the "Apple way".
# Parameters:

HOSTS_LIST=`echo $RC_ARCHS | sed 's/[[:space:]]/;/g'`

# The first parameter is a yes/no that indicates whether assertions should be
# enabled in the LLVM libs/tools.
LLVM_ASSERTIONS="$1"

# The second parameter is a yes/no that indicates whether this is an optimized
# build.
LLVM_OPTIMIZED="$2"

SDKROOT_PATH=`xcodebuild -version -sdk $SDKROOT Path`

if [ "$LLVM_OPTIMIZED" = "yes" ]; then
    BUILD_TYPE=RelWithDebInfo
else
    BUILD_TYPE=Debug
fi

if [ -d $SRCROOT/src ]; then
  LLVM_SRCROOT=$SRCROOT/src
  IB_ROOT=$SRCROOT
else
  LLVM_SRCROOT=$SRCROOT
  IB_ROOT=$LLVM_SRCROOT/tools/clang/utils/ib
fi

VERSION=`echo $RC_ProjectSourceVersion | sed 's/\..*//'`
MAJOR_VERISON=${VERSION:0:1}
MINOR_VERISON=${VERSION:2:3}
MAJ_MIN_VER=${MAJOR_VERISON}.${MINOR_VERISON}
FULL_VER=${MAJOR_VERISON}.${MINOR_VERISON}.0

SUBMISSION_MAJOR=`echo $RC_ProjectSourceVersion | awk -F'.' '{print $1}'`
SUBMISSION_MINOR=`echo $RC_ProjectSourceVersion | awk -F'.' '{print $2}'`
SUBMISSION_PATCH=`echo $RC_ProjectSourceVersion | awk -F'.' '{print $3}'`
SUB_MAJ_MIN_VER=${SUBMISSION_MAJOR}.${SUBMISSION_MINOR}

CMAKE_TOOLCHAIN_FLAGS="\
  -DCMAKE_TOOLCHAIN_FILE=$LLVM_SRCROOT/cmake/platforms/iOS.cmake \
  -DCMAKE_SYSTEM_NAME=Darwin \
  -DCMAKE_OSX_DEPLOYMENT_TARGET='' \
  -DLLVM_TOOL_LLVM_CONFIG_BUILD=Off \
  -DLLVM_ENABLE_THREADS=Off"
ORDER_FILE=$IB_ROOT/static-order-files/armv7/clang.order

OSX=MacOSX.platform

if [ "${SDKROOT_PATH#*$OSX}" != "$SDKROOT_PATH"  ]; then
  BUILDING_HOST=YES
  CMAKE_TOOLCHAIN_FLAGS=""
  ORDER_FILE=$IB_ROOT/static-order-files/x86_64/clang.order
fi

if [ -e $ORDER_FILE ]; then
  ORDER_FILE_CMAKE_FLAG="-DCLANG_ORDER_FILE=$ORDER_FILE"
fi

# Figure out how many make processes to run.
SYSCTL=`sysctl -n hw.activecpu`
# sysctl -n hw.* does not work when invoked via B&I chroot /BuildRoot.
# Builders can default to 2, since even if they are single processor,
# nothing else is running on the machine.
if [ -z "$SYSCTL" ]; then
    SYSCTL=2
fi

CMAKE=`xcrun -find cmake`
NINJA=`xcrun -find ninja`
CC=`xcrun -find clang`
CXX=`xcrun -find clang++`
PREFIX=$DSTROOT
CMAKE_OPTS="\
  -DLLVM_ENABLE_ASSERTIONS:BOOL=$LLVM_ASSERTIONS \
  -DCMAKE_INSTALL_PREFIX=$PREFIX \
  -DCMAKE_MAKE_PROGRAM=$NINJA \
  -DCMAKE_CXX_COMPILER=$CXX \
  -DCMAKE_C_COMPILER=$CC"

################################################################################

# Build the LLVM tree native.
mkdir -p $OBJROOT/obj-llvm-native || exit 1
cd $OBJROOT/obj-llvm-native || exit 1

# First build the native tblgen's
OLD_SDKROOT=$SDKROOT
OLD_TOOLCHAIN_INSTALL_DIR=$TOOLCHAIN_INSTALL_DIR
OLD_TOOLCHAINS=$TOOLCHAINS
OLD_IPHONEOS_DEPLOYMENT_TARGET=$IPHONEOS_DEPLOYMENT_TARGET
OLD_TVOS_DEPLOYMENT_TARGET=$TVOS_DEPLOYMENT_TARGET
OLD_WATCHOS_DEPLOYMENT_TARGET=$WATCHOS_DEPLOYMENT_TARGET

# If we're building for iOS, we need to set up a native host environment
if [ "$RC_PURPLE" = "YES" ]; then
  IPHONEOS_DEPLOYMENT_TARGET=
  TVOS_DEPLOYMENT_TARGET=
  WATCHOS_DEPLOYMENT_TARGET=
  SDKROOT=macosx
  TOOLCHAIN_INSTALL_DIR=
  TOOLCHAINS=
fi

$CMAKE -G Ninja \
    $CMAKE_OPTS \
    -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DCMAKE_BUILD_TYPE=Release \
    "$LLVM_SRCROOT" \
    || exit 1

SDKROOT=$SDKROOT TOOLCHAIN_INSTALL_DIR= TOOLCHAINS= IPHONEOS_DEPLOYMENT_TARGET= TVOS_DEPLOYMENT_TARGET= WATCHOS_DEPLOYMENT_TARGET= $NINJA -v llvm-tblgen clang-tblgen llvm-config
if [ $? != 0 ] ; then
    echo "error: Clang 'make native tablegen exes' failed!"
    exit 1
fi

SDKROOT=$OLD_SDKROOT
IPHONEOS_DEPLOYMENT_TARGET=$OLD_IPHONEOS_DEPLOYMENT_TARGET
TVOS_DEPLOYMENT_TARGET=$OLD_TVOS_DEPLOYMENT_TARGET
WATCHOS_DEPLOYMENT_TARGET=$OLD_WATCHOS_DEPLOYMENT_TARGET
TOOLCHAIN_INSTALL_DIR=$OLD_TOOLCHAIN_INSTALL_DIR
TOOLCHAINS=$OLD_TOOLCHAINS
################################################################################

# Build the LLVM tree universal.
mkdir -p $OBJROOT/obj-llvm || exit 1
cd $OBJROOT/obj-llvm || exit 1

if [ "$BUILDING_HOST" = "YES" ]; then
  CACHE_FILE=$LLVM_SRCROOT/tools/clang/cmake/caches/Apple-stage1.cmake
  BUILD_TARGET=bootstrap-install
else
  CACHE_FILE=$LLVM_SRCROOT/tools/clang/cmake/caches/Apple-device.cmake
  BUILD_TARGET=install
fi

TOOLCHAIN_USR=$DSTROOT/$TOOLCHAIN_INSTALL_DIR/usr

$CMAKE -G 'Ninja' -C $CACHE_FILE \
    $CMAKE_OPTS \
    -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
    -DCMAKE_OSX_ARCHITECTURES="$HOSTS_LIST" \
    -DLLVM_TABLEGEN=$OBJROOT/obj-llvm-native/bin/llvm-tblgen \
    -DCLANG_TABLEGEN=$OBJROOT/obj-llvm-native/bin/clang-tblgen \
    -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_USR \
    -DPACKAGE_VERSION=$FULL_VER \
    -DLLVM_VERSION_MAJOR=$SUBMISSION_MAJOR \
    -DLLVM_VERSION_MINOR=$SUBMISSION_MINOR \
    -DLLVM_VERSION_PATCH=$SUBMISSION_PATCH \
    -DCLANG_REPOSITORY_STRING=clang-$SUBMISSION_MAJOR.$SUBMISSION_MINOR.$SUBMISSION_PATCH \
    -DLLVM_VERSION_SUFFIX="" \
    $CMAKE_TOOLCHAIN_FLAGS \
    $ORDER_FILE_CMAKE_FLAG \
    "$LLVM_SRCROOT" \
    || exit 1

if [ "$BUILDING_HOST" = "YES" ]; then
  $NINJA -v install-libcxx
  if ! test $? == 0 ; then
      echo "error: LLVM 'ninja install-libcxx' failed!"
      exit 1
  fi
fi

$NINJA -v $BUILD_TARGET
if ! test $? == 0 ; then
    echo "error: LLVM 'ninja bootstrap-install' failed!"
    exit 1
fi

# Build the runtime
if [ "$BUILDING_HOST" = "YES" ]; then
  mkdir -p $OBJROOT/obj-rt || exit 1
  cd $OBJROOT/obj-rt|| exit 1


  $CMAKE -G 'Ninja' -C $LLVM_SRCROOT/projects/compiler-rt/cmake/caches/Apple.cmake \
      $CMAKE_OPTS \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_CONFIG_PATH=$OBJROOT/obj-llvm-native/bin/llvm-config \
      -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_USR/lib/clang/$FULL_VER/ \
      -DCMAKE_C_COMPILER=$TOOLCHAIN_USR/bin/clang \
      -DCMAKE_CXX_COMPILER=$TOOLCHAIN_USR/bin/clang++ \
      "$LLVM_SRCROOT/projects/compiler-rt" \
      || exit 1

  $NINJA -v install
  if ! test $? == 0 ; then
      echo "error: LLVM 'ninja install (compiler-rt)' failed!"
      exit 1
  fi

fi

# DSTROOT fixups
mkdir -p $TOOLCHAIN_USR/local/lib/
mkdir -p $TOOLCHAIN_USR/local/lib/clang/
mkdir -p $TOOLCHAIN_USR/local/bin/
mkdir -p $TOOLCHAIN_USR/local/include/
mkdir -p $TOOLCHAIN_USR/share/man/man1/
mkdir -p $DSTROOT/usr/local/bin/

# fixup bin
cp $OBJROOT/obj-llvm/tools/clang/bootstrap-bins/bin/c-index-test $TOOLCHAIN_USR/local/bin/
mv $TOOLCHAIN_USR/bin/clang-format $TOOLCHAIN_USR/local/bin/
rm $TOOLCHAIN_USR/bin/git-clang-format
rm $TOOLCHAIN_USR/bin/clang-check
rm $TOOLCHAIN_USR/bin/clang
mv $TOOLCHAIN_USR/bin/clang-$MAJ_MIN_VER $TOOLCHAIN_USR/bin/clang

# fixup lib
rm $TOOLCHAIN_USR/lib/libLTO.dylib
rm $TOOLCHAIN_USR/lib/libLTO.$SUB_MAJ_MIN_VER.dylib
mv $TOOLCHAIN_USR/lib/libLTO.$RC_ProjectSourceVersion.dylib $TOOLCHAIN_USR/lib/libLTO.dylib
# FIX-ME: Make sure we don't install libclang because swift does.
rm $TOOLCHAIN_USR/lib/libclang.*

# fixup headers
mv $TOOLCHAIN_USR/include/llvm-c $TOOLCHAIN_USR/local/include/llvm-c
mv $TOOLCHAIN_USR/include/clang-c $TOOLCHAIN_USR/local/include/clang-c
install -m 0444 $LLVM_SRCROOT/include/llvm-c/Support.h $TOOLCHAIN_USR/local/include/llvm-c/
install -m 0444 $LLVM_SRCROOT/include/llvm-c/ProfileData.h $TOOLCHAIN_USR/local/include/llvm-c/
install -m 0444 $LLVM_SRCROOT/tools/clang/include/clang-c/module.modulemap $TOOLCHAIN_USR/local/include/clang-c/module.modulemap

# other fixup
install -m 0444 $LLVM_SRCROOT/utils/clang-parse-diagnostics-file $DSTROOT/usr/local/bin/clang-parse-diagnostics-file
rm -rf $TOOLCHAIN_USR/share/clang
rm -rf $TOOLCHAIN_USR/include/c++/v1/support/
rm $TOOLCHAIN_USR/lib/clang/$FULL_VER/asan_blacklist.txt
rm $TOOLCHAIN_USR/lib/clang/$FULL_VER/cfi_blacklist.txt
echo 1 > $OBJROOT/enable_objc_gc
install -m 0444 $OBJROOT/enable_objc_gc $TOOLCHAIN_USR/local/lib/clang/enable_objc_gc

#install licenses and manpages
if [ -d $IB_ROOT ]; then
  mkdir -p $TOOLCHAIN_USR/local/OpenSourceVersions/
  install -m 0444 $IB_ROOT/clang.plist $TOOLCHAIN_USR/local/OpenSourceVersions/clang.plist
  install -m 0444 $IB_ROOT/llvm-cov.1 $TOOLCHAIN_USR/share/man/man1/llvm-cov.1
  install -m 0444 $IB_ROOT/clang.1 $TOOLCHAIN_USR/share/man/man1/clang.1
fi
mkdir -p $TOOLCHAIN_USR/local/OpenSourceLicenses/
install -m 0444 $LLVM_SRCROOT/LICENSE.TXT $TOOLCHAIN_USR/local/OpenSourceLicenses/clang-llvm.txt
install -m 0444 $LLVM_SRCROOT/tools/clang/LICENSE.TXT $TOOLCHAIN_USR/local/OpenSourceLicenses/clang.txt


cd $TOOLCHAIN_USR/share/man/man1
ln -sf clang.1 cc.1
ln -sf clang.1 clang++.1
ln -sf clang++.1 c++.1
ln -sf llvm-cov.1 gcov.1

# symlink dsymutil and gcov
cd $TOOLCHAIN_USR/bin

ln -s llvm-dsymutil dsymutil
ln -s llvm-cov gcov

cd $SYMROOT || exit 1

# Clean out SYM_DIR in case -noclean was passed to buildit.
rm -rf * || exit 1

# Generate .dSYM files
DSYMUTIL=`xcrun -find dsymutil`
find $PREFIX -perm -0111 -type f \
    -print | xargs -n 1 -P ${SYSCTL} ${DSYMUTIL}

# Save .dSYM files and .a archives
cd $PREFIX || exit 1
find . \( -path \*.dSYM/\* \) -print \
    | cpio -pdml $SYMROOT || exit 1

find $PREFIX -name \*.dSYM -print | xargs rm -r || exit 1

STRIP=`xcrun -find strip`
if [ "x$LLVM_DEBUG" != "x1" ]; then
    # Strip local symbols from llvm libraries.
    #
    # Use '-l' to strip i386 modules. N.B. that flag doesn't work with kext or
    # PPC objects!
    $STRIP -Sl $PREFIX/bin/*
fi

chgrp -h -R wheel $DSTROOT
chgrp -R wheel $DSTROOT

################################################################################
# w00t! Done!

exit 0
